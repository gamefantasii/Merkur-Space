workflows:
  unity-ios:
    environment:
      xcode: latest
      cocoapods: default
      unity: 6000.0.56f1
      ios_signing:
        # Явно указываем, какие сертификаты/профили ставить
        certificates:
          - apple_distribution           # <- reference name сертификата из UI
        provisioning_profiles:
          - merspace_appstore           # <- reference name профиля app
          - merspace_nse_appstore       # <- reference name профиля NSE
      groups:
        - unity_credentials
        - app_store_credentials
      vars:
        BUNDLE_ID: com.joams.merspace
        TEAM_ID: "7LB2476AFZ"
        NSE_BUNDLE_ID: com.joams.merspace.OneSignalNotificationServiceExtension
        APP_STORE_APPLE_ID: 6751573211
        UNITY_IOS_DIR: ios
        XCODE_WORKSPACE: Unity-iPhone.xcworkspace
        XCODE_SCHEME: Unity-iPhone

    scripts:
      - name: Activate Unity license
        script: |
          $UNITY_HOME/Contents/MacOS/Unity -batchmode -quit -logFile \
            -serial "${UNITY_SERIAL}" -username "${UNITY_EMAIL}" -password "${UNITY_PASSWORD}"

      - name: Export iOS project from Unity
        script: |
          $UNITY_HOME/Contents/MacOS/Unity -batchmode -quit -logFile \
            -projectPath . -executeMethod BuildScript.BuildIos -nographics

      - name: Install CocoaPods
        script: |
          cd "$UNITY_IOS_DIR"
          pod install

      - name: Set up keychain & install identities from team storage
        script: |
          keychain initialize
          keychain add-certificates        # <-- установит сертификаты и профили, которые ты задал в ios_signing

      - name: Apply provisioning profiles to Xcode project
        script: xcode-project use-profiles

      - name: Increment build number
        script: |
          LATEST=$(app-store-connect get-latest-testflight-build-number "$APP_STORE_APPLE_ID" || app-store-connect get-latest-app-store-build-number "$APP_STORE_APPLE_ID" || echo 0)
          cd "$UNITY_IOS_DIR"
          agvtool new-version -all $((LATEST + 1))

      - name: Build & export IPA (Automatic signing)
        script: |
          #!/usr/bin/env bash
          set -euo pipefail

          ARCHIVE_PATH="$CM_BUILD_DIR/ios/xcarchive/$XCODE_SCHEME.xcarchive"
          EXPORT_DIR="$CM_BUILD_DIR/build/ios/ipa"
          mkdir -p "$EXPORT_DIR"

          # Убедимся, что сертификаты/профили из team storage установлены в систему
          # (должны быть заданы в environment.ios_signing)
          keychain add-certificates

          # Найдём по факту ИМЕНА профилей, соответствующих нашим bundle id
          APP_BUNDLE_ID="com.joams.merspace"
          NSE_BUNDLE_ID="com.joams.merspace.OneSignalNotificationServiceExtension"

          get_profile_name_for_bid () {
            local BID="$1"
            local NAME=""
            for f in ~/Library/MobileDevice/Provisioning\ Profiles/*.mobileprovision; do
              # распакуем в plist
              TMP_PLIST=$(mktemp)
              security cms -D -i "$f" -o "$TMP_PLIST" >/dev/null 2>&1 || continue
              APPID=$(/usr/libexec/PlistBuddy -c "Print :Entitlements:application-identifier" "$TMP_PLIST" 2>/dev/null || echo "")
              NAME_CAND=$(/usr/libexec/PlistBuddy -c "Print :Name" "$TMP_PLIST" 2>/dev/null || echo "")
              rm -f "$TMP_PLIST"
              # application-identifier выглядит как TEAMID.bundle.id
              if [[ "$APPID" == *".$BID" || "$APPID" == "$BID" || "$APPID" == *".$BID"* ]]; then
                NAME="$NAME_CAND"
                echo "$NAME"
                return 0
              fi
            done
            return 1
          }

          APP_PROFILE_NAME=$(get_profile_name_for_bid "$APP_BUNDLE_ID")
          NSE_PROFILE_NAME=$(get_profile_name_for_bid "$NSE_BUNDLE_ID" || true)

          echo "Using provisioning profiles:"
          echo "  App: ${APP_PROFILE_NAME:-<not found>}"
          echo "  NSE: ${NSE_PROFILE_NAME:-<not found>}"

          if [ -z "${APP_PROFILE_NAME:-}" ]; then
            echo "ERROR: App Store provisioning profile for $APP_BUNDLE_ID not found among installed profiles." >&2
            ls -1 ~/Library/MobileDevice/Provisioning\ Profiles || true
            exit 1
          fi

          # Сформируем exportOptions.plist для ручного экспорта
          cat > exportOptions.plist <<EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key><string>app-store</string>
            <key>signingStyle</key><string>manual</string>
            <key>teamID</key><string>${TEAM_ID}</string>
            <key>destination</key><string>export</string>
            <key>stripSwiftSymbols</key><true/>
            <key>compileBitcode</key><false/>
            <key>uploadBitcode</key><false/>
            <key>provisioningProfiles</key>
            <dict>
              <key>${APP_BUNDLE_ID}</key><string>${APP_PROFILE_NAME}</string>
              $( [ -n "${NSE_PROFILE_NAME:-}" ] && echo "<key>${NSE_BUNDLE_ID}</key><string>${NSE_PROFILE_NAME}</string>" )
            </dict>
          </dict>
          </plist>
          EOF

          # Экспортируем IPA, НЕ требуя аккаунта (используем уже установленные профили)
          xcodebuild -exportArchive \
            -archivePath "$ARCHIVE_PATH" \
            -exportOptionsPlist exportOptions.plist \
            -exportPath "$EXPORT_DIR"

          echo "IPA exported to: $EXPORT_DIR"





    artifacts:
      - build/ios/ipa/*.ipa
      - $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.dSYM

    publishing:
      app_store_connect:
        api_key: $APP_STORE_CONNECT_PRIVATE_KEY
        key_id: $APP_STORE_CONNECT_KEY_IDENTIFIER
        issuer_id: $APP_STORE_CONNECT_ISSUER_ID
        submit_to_testflight: true

      scripts:
        - name: Deactivate Unity license
          script: |
            /Applications/Unity\ Hub.app/Contents/Frameworks/UnityLicensingClient_V1.app/Contents/MacOS/Unity.Licensing.Client \
              --return-ulf \
              --username "${UNITY_EMAIL}" \
              --password "${UNITY_PASSWORD}" \
              || $UNITY_HOME/Contents/MacOS/Unity -quit -batchmode -returnlicense || true
