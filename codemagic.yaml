workflows:
  unity-ios-lts:
    name: Unity iOS (LTS preferred, OneSignal)
    environment:
      groups:
        - unity_pro_credentials           # UNITY_EMAIL, UNITY_PASSWORD, UNITY_SERIAL (Pro ключ SC-…)
        - app_store_credentials           # APP_STORE_CONNECT_ISSUER_ID, APP_STORE_CONNECT_KEY_IDENTIFIER, APP_STORE_CONNECT_PRIVATE_KEY
        - certificate_credentials         # CERTIFICATE_PRIVATE_KEY (+ опц. CERTIFICATE_PASSWORD)
      vars:
        # Укажи желаемый Unity на случай, если предустановленного нет
        UNITY_VERSION: "6000.0.56f1"      # пример LTS; можно поменять на актуальный
        UNITY_PROJECT_PATH: "ASO iOs 8 Merkur Space"       # твой подпроект с пробелами
        IOS_EXPORT_PATH: "$UNITY_PROJECT_PATH/build/ios"
        BUNDLE_ID: "com.joams.merspace"
        NSE_BUNDLE_ID: "com.joams.merspace.OneSignalNotificationServiceExtension"
        APP_STORE_APPLE_ID: "6751573211"
      xcode: 16.4
      cocoapods: default

    triggering:
      events: [push, pull_request, tag]
      branch_patterns:
        - pattern: "develop"
          include: true
          source: true

    scripts:
      - name: Pick preinstalled Unity if available
        script: |
          set -e
          BASE="/Applications/Unity/Hub/Editor"
          if [ -d "$BASE" ]; then
            echo "Preinstalled Unity editors:"; ls -1 "$BASE" || true
            # Попробуем выбрать предустановленный LTS 2022.3.x (пример)
            CAND=$(ls -1 "$BASE" | grep -E '^2022\.3\.' | sort -V | tail -n1 || true)
            if [ -n "$CAND" ]; then
              echo "Using preinstalled Unity $CAND"
              echo "UNITY_VERSION=$CAND" >> "$CM_ENV"
              echo "UNITY_HOME=$BASE/$CAND/Unity.app" >> "$CM_ENV"
              echo "SKIP_UNITY_INSTALL=1" >> "$CM_ENV"
            fi
          fi
          # Если не нашли — будем ставить указанную UNITY_VERSION
          if ! grep -q '^UNITY_HOME=' "$CM_ENV"; then
            echo "UNITY_HOME=$BASE/$UNITY_VERSION/Unity.app" >> "$CM_ENV"
          fi

      - name: Install Unity via Hub CLI (only if missing)
        script: |
          set -e
          if [ "${SKIP_UNITY_INSTALL:-0}" = "1" ] && [ -x "$UNITY_HOME/Contents/MacOS/Unity" ]; then
            echo "Unity is preinstalled, skipping install."
            exit 0
          fi
          # Устанавливаем Hub и нужный Editor + iOS модуль
          if ! command -v unity-hub >/dev/null 2>&1; then
            brew install --cask unity-hub || true
          fi
          unity-hub install --version "$UNITY_VERSION" --module iOS || true
          [ -x "$UNITY_HOME/Contents/MacOS/Unity" ] || { echo "Unity not found at $UNITY_HOME"; exit 1; }
          "$UNITY_HOME/Contents/MacOS/Unity" -version

      - name: Activate Unity (login, fallback to serial)
        script: |
          set -e
          if "$UNITY_HOME/Contents/MacOS/Unity" -batchmode -nographics -quit -logFile - \
               -username "${UNITY_EMAIL}" -password "${UNITY_PASSWORD}"; then
            echo "✔ Activated via sign-in."
          elif [ -n "${UNITY_SERIAL:-}" ]; then
            echo "Login failed/blocked, trying serial…"
            "$UNITY_HOME/Contents/MacOS/Unity" -batchmode -nographics -quit -logFile - \
              -serial "${UNITY_SERIAL}" -username "${UNITY_EMAIL}" -password "${UNITY_PASSWORD}"
            echo "✔ Activated via serial."
          else
            echo "✖ No valid license. Set UNITY_SERIAL or allow sign-in." && exit 1
          fi

      - name: Sanity check BuildScript
        script: |
          set -e
          FILE="$UNITY_PROJECT_PATH/Assets/Editor/Build.cs"
          [ -f "$FILE" ] || { echo "✖ $FILE not found. Commit BuildScript.BuildiOS."; exit 1; }
          /usr/bin/grep -q "BuildScript.BuildiOS" "$FILE" || { echo "✖ Build.cs must contain method BuildScript.BuildiOS"; exit 1; }

      - name: Export iOS project from Unity
        script: |
          set -e
          "$UNITY_HOME/Contents/MacOS/Unity" \
            -batchmode -nographics -quit -logFile - \
            -projectPath "$UNITY_PROJECT_PATH" \
            -executeMethod BuildScript.BuildiOS
          echo "Exported to: $IOS_EXPORT_PATH"
          /bin/ls -la "$IOS_EXPORT_PATH" || true

      - name: Install CocoaPods
        script: |
          set -e
          cd "$IOS_EXPORT_PATH"
          [ -f "Podfile" ] || { echo "✖ Podfile not found. Run EDM4U iOS Resolver in Unity and commit plugin updates."; exit 1; }
          pod repo update || true
          pod install

      - name: Set up keychain & fetch signing (App + NSE)
        script: |
          set -e
          keychain initialize
          app-store-connect fetch-signing-files "$BUNDLE_ID" \
            --type IOS_APP_STORE --platform IOS --create \
            --certificate-key @env:CERTIFICATE_PRIVATE_KEY ${CERTIFICATE_PASSWORD:+--certificate-key-password "$CERTIFICATE_PASSWORD"}
          app-store-connect fetch-signing-files "$NSE_BUNDLE_ID" \
            --type IOS_APP_STORE --platform IOS --create \
            --certificate-key @env:CERTIFICATE_PRIVATE_KEY ${CERTIFICATE_PASSWORD:+--certificate-key-password "$CERTIFICATE_PASSWORD"}
          keychain add-certificates

      - name: Apply provisioning profiles
        script: |
          set -e
          cd "$IOS_EXPORT_PATH"
          xcode-project use-profiles

      - name: Increment build number (TestFlight)
        script: |
          set -e
          LATEST=$(app-store-connect get-latest-testflight-build-number "$APP_STORE_APPLE_ID" || echo 0)
          cd "$IOS_EXPORT_PATH"
          agvtool new-version -all $((LATEST + 1))

      - name: Build IPA
        script: |
          set -e
          cd "$IOS_EXPORT_PATH"
          if [ -d "Unity-iPhone.xcworkspace" ]; then
            xcode-project build-ipa --workspace "Unity-iPhone.xcworkspace" --scheme "Unity-iPhone"
          else
            xcode-project build-ipa --project "Unity-iPhone.xcodeproj" --scheme "Unity-iPhone"
          fi

      - name: Deactivate Unity license
        script: |
          "$UNITY_HOME/Contents/MacOS/Unity" -batchmode -quit -returnlicense -nographics || true

    artifacts:
      - "$IOS_EXPORT_PATH/*.ipa"
      - "$HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.dSYM"

    publishing:
      app_store_connect:
        api_key: $APP_STORE_CONNECT_PRIVATE_KEY
        key_id: $APP_STORE_CONNECT_KEY_IDENTIFIER
        issuer_id: $APP_STORE_CONNECT_ISSUER_ID
        submit_to_testflight: true
