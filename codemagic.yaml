workflows:
  unity-ios:
    name: Unity iOS (Pro, serial key)
    environment:
      groups:
        - unity_credentials            # UNITY_EMAIL / UNITY_PASSWORD / UNITY_SERIAL (SC-…)
        - app_store_credentials        # APP_STORE_CONNECT_ISSUER_ID / KEY_IDENTIFIER / PRIVATE_KEY (.p8)
        - certificate_credentials      # CERTIFICATE_PRIVATE_KEY = -----BEGIN RSA PRIVATE KEY-----
      vars:
        UNITY_VERSION: "6000.1.5f1"
        UNITY_CHANGESET: "923722cbbcfc"

        IOS_EXPORT_PATH: "build/ios"
        XCODE_WORKSPACE: "Unity-iPhone.xcworkspace"
        XCODE_PROJECT: "Unity-iPhone.xcodeproj"
        XCODE_SCHEME: "Unity-iPhone"

        BUNDLE_ID: "com.joams.merspace"
        NSE_BUNDLE_ID: "com.joams.merspace.OneSignalNotificationServiceExtension"
        APP_STORE_APPLE_ID: "6751573211"

      xcode: latest
      cocoapods: default

    scripts:
      - name: Install Unity via Hub CLI (if missing)
        script: |
          set -e
          HUB="/Applications/Unity Hub.app/Contents/MacOS/Unity Hub"
          UNITY_HOME="/Applications/Unity/Hub/Editor/${UNITY_VERSION}/Unity.app"
          if [ ! -x "$UNITY_HOME/Contents/MacOS/Unity" ]; then
            echo "Unity $UNITY_VERSION not found, installing via Hub…"
            yes Y | "$HUB" -- --headless install --version "$UNITY_VERSION" --changeset "$UNITY_CHANGESET" -a arm64
            yes Y | "$HUB" -- --headless install-modules --version "$UNITY_VERSION" -m ios -a arm64
          else
            echo "Unity $UNITY_VERSION already present."
          fi
          echo "UNITY_HOME=$UNITY_HOME" >> "$CM_ENV"
          "$UNITY_HOME/Contents/MacOS/Unity" -version

      - name: Pre-clean Unity license (best effort)
        script: |
          "$UNITY_HOME/Contents/MacOS/Unity" -batchmode -quit -returnlicense -nographics || true

      - name: Activate Unity license (serial)
        script: |
          "$UNITY_HOME/Contents/MacOS/Unity" \
            -batchmode -nographics -quit -logFile - \
            -serial "${UNITY_SERIAL}" \
            -username "${UNITY_EMAIL}" \
            -password "${UNITY_PASSWORD}"

      - name: Export iOS project from Unity
        script: |
          set -e
          "$UNITY_HOME/Contents/MacOS/Unity" \
            -batchmode -nographics -quit -logFile - \
            -projectPath "$(pwd)" \
            -executeMethod BuildScript.BuildiOS
          echo "Exported to: $IOS_EXPORT_PATH"
          # Диагностика: покажем структуру экспорта
          /bin/ls -la "$IOS_EXPORT_PATH" || true
          /usr/bin/find "$IOS_EXPORT_PATH" -maxdepth 1 -type f -name "Podfile" -print || true

      - name: Verify export & Podfile
        script: |
          set -e
          if [ ! -d "$IOS_EXPORT_PATH" ]; then
            echo "ERROR: Export path $IOS_EXPORT_PATH not found. Проверь BuildScript.BuildiOS и переменную IOS_EXPORT_PATH." && exit 1
          fi
          if [ ! -f "$IOS_EXPORT_PATH/Podfile" ]; then
            echo "ERROR: Podfile not found in $IOS_EXPORT_PATH. Убедись, что EDM4U/OneSignal установлены и Force Resolve сработал до/во время экспорта."
            echo "Подсказка: проверь, что плагины EDM4U/OneSignal есть в проекте и их постпроцесс включён."
            exit 1
          fi

      - name: Install CocoaPods
        script: |
          set -e
          cd "$IOS_EXPORT_PATH"
          pod repo update || true
          pod install

      - name: Setup signing (keychain & provisioning profiles)
        script: |
          keychain initialize
          app-store-connect fetch-signing-files "$BUNDLE_ID"     --type IOS_APP_STORE --platform=IOS --create --certificate-key @env:CERTIFICATE_PRIVATE_KEY
          app-store-connect fetch-signing-files "$NSE_BUNDLE_ID" --type IOS_APP_STORE --platform=IOS --create --certificate-key @env:CERTIFICATE_PRIVATE_KEY
          keychain add-certificates

      - name: Apply provisioning profiles
        script: |
          cd "$IOS_EXPORT_PATH"
          xcode-project use-profiles

      - name: Increment build number (TestFlight)
        script: |
          LATEST=$(app-store-connect get-latest-testflight-build-number "$APP_STORE_APPLE_ID" || echo 0)
          cd "$IOS_EXPORT_PATH"
          agvtool new-version -all $((LATEST + 1))

      - name: Build IPA
        script: |
          cd "$IOS_EXPORT_PATH"
          if [ -d "$XCODE_WORKSPACE" ]; then
            xcode-project build-ipa --workspace "$XCODE_WORKSPACE" --scheme "$XCODE_SCHEME"
          else
            xcode-project build-ipa --project "$XCODE_PROJECT" --scheme "$XCODE_SCHEME"
          fi

    publishing:
      scripts:
        - name: Deactivate Unity license
          script: |
            "$UNITY_HOME/Contents/MacOS/Unity" -batchmode -quit -returnlicense -nographics
      app_store_connect:
        api_key: $APP_STORE_CONNECT_PRIVATE_KEY
        key_id: $APP_STORE_CONNECT_KEY_IDENTIFIER
        issuer_id: $APP_STORE_CONNECT_ISSUER_ID
        submit_to_testflight: true

    artifacts:
      - $IOS_EXPORT_PATH/*.ipa
      - $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.dSYM
