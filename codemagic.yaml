workflows:
  unity-ios:
    name: Unity iOS (Merspace + OneSignal)
    environment:
      groups:
        - app_store_credentials         # APP_STORE_CONNECT_PRIVATE_KEY, APP_STORE_CONNECT_KEY_IDENTIFIER, APP_STORE_CONNECT_ISSUER_ID
        - certificate_credentials       # APPLE_CERTIFICATE (base64 .p12), APPLE_CERTIFICATE_PASSWORD
      vars:
        UNITY_VERSION: "6000.0.56f1"
        IOS_EXPORT_PATH: "build/ios"
        BUNDLE_ID: "com.joams.merspace"
        NSE_BUNDLE_ID: "com.joams.merspace.OneSignalNotificationServiceExtension"
        APP_GROUP: "group.com.joams.merspace"
        XCODE_WORKSPACE: "Unity-iPhone.xcworkspace"
        XCODE_PROJECT: "Unity-iPhone.xcodeproj"
        XCODE_SCHEME: "Unity-iPhone"
        APP_STORE_APPLE_ID: "6751573211"
      xcode: 16.4
      cocoapods: default

    scripts:
      - name: Set UNITY_HOME & show project Unity version
        script: |
          CMENV="${CM_ENV:-$BASH_ENV}"
          touch "$CMENV"
          echo "UNITY_HOME=/Applications/Unity/Hub/Editor/$UNITY_VERSION/Unity.app" >> "$CMENV"
          echo "Using Unity: $UNITY_VERSION"
          if [ -f "ProjectSettings/ProjectVersion.txt" ]; then
            PV=$(awk -F': ' '/m_EditorVersion/ {print $2; exit}' ProjectSettings/ProjectVersion.txt || true)
            echo "Project reports Unity: ${PV:-unknown}"
            if [ -n "$PV" ] && [ "$PV" != "$UNITY_VERSION" ]; then
              echo "WARNING: Project version differs from pipeline UNITY_VERSION."
            fi
          fi

      - name: Install Unity (only if missing)
        script: |
          set -euo pipefail
          if [ ! -x "$UNITY_HOME/Contents/MacOS/Unity" ]; then
            echo "Unity $UNITY_VERSION not found. Installing via Unity Hub CLIâ€¦"
            if ! command -v unity-hub >/dev/null 2>&1; then
              brew install --cask unity-hub
            fi
            unity-hub -- --headless install --version "$UNITY_VERSION"
            unity-hub -- --headless install-modules --version "$UNITY_VERSION" --module ios
          fi
          "$UNITY_HOME/Contents/MacOS/Unity" -version

      - name: Activate Unity license (serial)
        script: |
          set -e
          if [ -z "${UNITY_SERIAL:-}" ]; then
            echo "UNITY_SERIAL is not set. Add your Unity Pro serial to environment variables." >&2
            exit 1
          fi
          "$UNITY_HOME/Contents/MacOS/Unity" \
            -batchmode -nographics -quit -logFile - \
            -serial "${UNITY_SERIAL}" \
            -username "${UNITY_EMAIL}" \
            -password "${UNITY_PASSWORD}"

      - name: Sanity check BuildScript
        script: |
          set -e
          if [ ! -f "Assets/Editor/BuildScript.cs" ]; then
            echo "ERROR: Assets/Editor/BuildScript.cs not found. Commit BuildScript.BuildiOS." >&2
            exit 1
          fi
          grep -qi "BuildScript.BuildiOS" Assets/Editor/BuildScript.cs || {
            echo "ERROR: BuildScript.BuildiOS method not found in BuildScript.cs" >&2; exit 1; }

      - name: Init keychain
        script: keychain initialize

      - name: Import Apple certificates to keychain
        script: keychain add-certificates

      - name: Fetch signing files (App + NSE)
        script: |
          set -e
          app-store-connect fetch-signing-files "$BUNDLE_ID" --type IOS_APP_STORE --create
          app-store-connect fetch-signing-files "$NSE_BUNDLE_ID" --type IOS_APP_STORE --create

      - name: Export iOS project from Unity
        script: |
          set -e
          "$UNITY_HOME/Contents/MacOS/Unity" \
            -batchmode -nographics -quit -logFile - \
            -projectPath "$CM_BUILD_DIR" \
            -executeMethod BuildScript.BuildiOS
          echo "Exported to: $IOS_EXPORT_PATH"
          test -d "$IOS_EXPORT_PATH" || { echo "Export not found at $IOS_EXPORT_PATH" >&2; exit 1; }

      - name: Install CocoaPods
        script: |
          set -e
          cd "$IOS_EXPORT_PATH"
          if [ -f "Podfile" ]; then
            pod repo update || true
            pod install
          else
            echo "ERROR: Podfile not found in $IOS_EXPORT_PATH. Run EDM4U iOS Resolver before export." >&2
            exit 1
          fi

      - name: Apply provisioning & entitlements (App + NSE)
        script: |
          set -euo pipefail
          cd "$IOS_EXPORT_PATH"

          # Apply provisioning to Xcode project
          xcode-project use-profiles

          make_entitlements() {
            local path="$1"
            mkdir -p "$(dirname "$path")"
            # Create empty plist if missing/corrupt
            if ! /usr/libexec/PlistBuddy -c "Print" "$path" >/dev/null 2>&1; then
              plutil -create xml1 "$path"
            fi
            /usr/libexec/PlistBuddy -c "Delete :com.apple.security.application-groups" "$path" 2>/dev/null || true
            /usr/libexec/PlistBuddy -c "Add :com.apple.security.application-groups array" "$path" 2>/dev/null || true
            /usr/libexec/PlistBuddy -c "Add :com.apple.security.application-groups:0 string $APP_GROUP" "$path"
            echo "Entitlements at $path:"
            /usr/libexec/PlistBuddy -c "Print" "$path" || true
          }

          ENT_APP="Unity-iPhone/Unity-iPhone.entitlements"
          ENT_NSE="OneSignalNotificationServiceExtension/OneSignalNotificationServiceExtension.entitlements"
          make_entitlements "$ENT_APP"
          make_entitlements "$ENT_NSE"

          # Ensure CODE_SIGN_ENTITLEMENTS set for both targets
          ruby -e "begin; require 'xcodeproj'; rescue LoadError; system('gem install xcodeproj --no-document') || exit(1); end"
          ruby - <<'RUBY'
            require 'xcodeproj'
            p = Xcodeproj::Project.open('Unity-iPhone.xcodeproj')
            map = {
              'Unity-iPhone' => 'Unity-iPhone/Unity-iPhone.entitlements',
              'OneSignalNotificationServiceExtension' => 'OneSignalNotificationServiceExtension/OneSignalNotificationServiceExtension.entitlements'
            }
            map.each do |tname, ent|
              if (t = p.targets.find { |x| x.name == tname })
                t.build_configurations.each { |cfg| cfg.build_settings['CODE_SIGN_ENTITLEMENTS'] = ent }
              end
            end
            p.save
RUBY

          xcodebuild -project "$XCODE_PROJECT" -target "Unity-iPhone" -showBuildSettings | /usr/bin/grep CODE_SIGN_ENTITLEMENTS || true
          xcodebuild -project "$XCODE_PROJECT" -target "OneSignalNotificationServiceExtension" -showBuildSettings | /usr/bin/grep CODE_SIGN_ENTITLEMENTS || true

      - name: Increment build number (TestFlight +1)
        script: |
          set -e
          LATEST=$(app-store-connect get-latest-testflight-build-number "$APP_STORE_APPLE_ID" || echo 0)
          cd "$IOS_EXPORT_PATH"
          agvtool new-version -all $((LATEST + 1))

      - name: Build .ipa
        script: |
          set -e
          cd "$IOS_EXPORT_PATH"
          if [ -d "$XCODE_WORKSPACE" ]; then
            xcode-project build-ipa --workspace "$XCODE_WORKSPACE" --scheme "$XCODE_SCHEME"
          else
            xcode-project build-ipa --project "$XCODE_PROJECT" --scheme "$XCODE_SCHEME"
          fi

      - name: Deactivate Unity license
        script: |
          "$UNITY_HOME/Contents/MacOS/Unity" -batchmode -quit -returnlicense -nographics || true

    artifacts:
      - $IOS_EXPORT_PATH/*.ipa
      - $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.dSYM

    publishing:
      app_store_connect:
        api_key: $APP_STORE_CONNECT_PRIVATE_KEY
        key_id: $APP_STORE_CONNECT_KEY_IDENTIFIER
        issuer_id: $APP_STORE_CONNECT_ISSUER_ID
        submit_to_testflight: true
