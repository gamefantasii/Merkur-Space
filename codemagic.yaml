workflows:
  unity-ios:
    name: Unity iOS (auto signing via CERTIFICATE_PRIVATE_KEY)
    max_build_duration: 120

    environment:
      xcode: latest
      cocoapods: default
      unity: 6000.0.56f1
      groups:
        - app_store_credentials
        - certificate_credentials
        - unity_credentials
      vars:
        # Bundle IDs и App Store Connect app ID
        BUNDLE_ID: com.joams.merspace
        NSE_BUNDLE_ID: com.joams.merspace.OneSignalNotificationServiceExtension
        APP_STORE_APPLE_ID: 6751573211

        # Пути/схемы после экспорта Unity
        UNITY_IOS_DIR: ios
        XCODE_WORKSPACE: Unity-iPhone.xcworkspace
        XCODE_SCHEME: Unity-iPhone

    triggering:
      events: [push, tag, pull_request]
      branch_patterns:
        - pattern: "develop"
          include: true
          source: true

    scripts:
      # 0) (опционально) если нужны system keychain и т.п.
      - name: Set up keychain
        script: keychain initialize

      # 1) Активируем Unity Pro
      - name: Activate Unity license
        script: |
          $UNITY_HOME/Contents/MacOS/Unity -batchmode -quit -logFile \
            -serial "${UNITY_SERIAL}" \
            -username "${UNITY_EMAIL}" \
            -password "${UNITY_PASSWORD}"

      # 2) Экспортируем iOS (Xcode-проект) из Unity
      - name: Export iOS project from Unity
        script: |
          $UNITY_HOME/Contents/MacOS/Unity -batchmode -quit -logFile \
            -projectPath . \
            -executeMethod BuildScript.BuildIos \
            -nographics

      # 3) Ставим поды (OneSignal и пр.) и используем .xcworkspace
      - name: Install CocoaPods
        script: |
          cd "$UNITY_IOS_DIR"
          pod install

      # 4) Получаем/создаём сертификат и профили (App Store) для app+NSE
      - name: Fetch signing files (app + NSE) via CERTIFICATE_PRIVATE_KEY
        script: |
          # Используем API-ключ из группы app_store_credentials
          export APPSTORE_CONNECT_KEY_ID="$APP_STORE_CONNECT_KEY_IDENTIFIER"
          export APPSTORE_CONNECT_ISSUER_ID="$APP_STORE_CONNECT_ISSUER_ID"
          export APPSTORE_CONNECT_PRIVATE_KEY="$APP_STORE_CONNECT_PRIVATE_KEY"

          # Создаст (при необходимости) Apple Distribution сертификат,
          # соберёт .p12 с паролем и создаст/подтянет App Store профили
          app-store-connect fetch-signing-files "$BUNDLE_ID"     --type IOS_APP_STORE --platform IOS --create --certificate-key-password='232425'
          app-store-connect fetch-signing-files "$NSE_BUNDLE_ID" --type IOS_APP_STORE --platform IOS --create --certificate-key-password='232425'

      # 5) Устанавливаем сертификаты/профили в кейчейн билд-агента
      - name: Use system default keychain
        script: keychain add-certificates

      # 6) Применяем профили к Xcode-проекту (app + NSE)
      - name: Apply provisioning profiles to Xcode project
        script: xcode-project use-profiles

      # 7) Инкрементим build number на базе TestFlight/App Store
      - name: Increment build number safely
        script: |
          LATEST=$(app-store-connect get-latest-testflight-build-number "$APP_STORE_APPLE_ID" || app-store-connect get-latest-app-store-build-number "$APP_STORE_APPLE_ID" || echo 0)
          cd "$UNITY_IOS_DIR"
          agvtool new-version -all $((LATEST + 1))

      # 8) Собираем IPA (через workspace)
      - name: Build ipa for distribution
        script: |
          xcode-project build-ipa \
            --workspace "$UNITY_IOS_DIR/$XCODE_WORKSPACE" \
            --scheme "$XCODE_SCHEME"

    artifacts:
      - build/ios/ipa/*.ipa
      - $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.dSYM

    publishing:
      app_store_connect:
        # Публикуем через API-ключ (как у вас было)
        api_key: $APP_STORE_CONNECT_PRIVATE_KEY
        key_id: $APP_STORE_CONNECT_KEY_IDENTIFIER
        issuer_id: $APP_STORE_CONNECT_ISSUER_ID
        submit_to_testflight: true

      scripts:
        - name: Deactivate Unity license
          script: |
            /Applications/Unity\ Hub.app/Contents/Frameworks/UnityLicensingClient_V1.app/Contents/MacOS/Unity.Licensing.Client \
              --return-ulf \
              --username "${UNITY_EMAIL}" \
              --password "${UNITY_PASSWORD}" \
              || $UNITY_HOME/Contents/MacOS/Unity -quit -batchmode -returnlicense || true
